/*
 * Telstra Messaging API
 *  The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages. 
 *
 * OpenAPI spec version: 2.2.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.telstra.messaging;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.telstra.messaging.MMSContent;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SendMmsRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-02-06T12:04:52.962+11:00")
public class SendMmsRequest {
  @SerializedName("from")
  private String from = null;

  @SerializedName("to")
  private String to = null;

  @SerializedName("subject")
  private String subject = null;

  @SerializedName("replyRequest")
  private Boolean replyRequest = null;

  @SerializedName("MMSContent")
  private List<MMSContent> mmSContent = new ArrayList<MMSContent>();

  public SendMmsRequest from(String from) {
    this.from = from;
    return this;
  }

   /**
   * This will be the source address that will be displayed on the receiving device. If it is not present then it will default to the MSISDN assigned to the app. If replyRequest is set to true, then this field will be ignored.
   * @return from
  **/
  @ApiModelProperty(required = true, value = "This will be the source address that will be displayed on the receiving device. If it is not present then it will default to the MSISDN assigned to the app. If replyRequest is set to true, then this field will be ignored.")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public SendMmsRequest to(String to) {
    this.to = to;
    return this;
  }

   /**
   * This is the destination address.
   * @return to
  **/
  @ApiModelProperty(required = true, value = "This is the destination address.")
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }

  public SendMmsRequest subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * The subject that will be used in an MMS message.
   * @return subject
  **/
  @ApiModelProperty(required = true, value = "The subject that will be used in an MMS message.")
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }

  public SendMmsRequest replyRequest(Boolean replyRequest) {
    this.replyRequest = replyRequest;
    return this;
  }

   /**
   * If set to true, the reply message functionality will be implemented and the to address will be ignored if present.
   * @return replyRequest
  **/
  @ApiModelProperty(required = true, value = "If set to true, the reply message functionality will be implemented and the to address will be ignored if present.")
  public Boolean isReplyRequest() {
    return replyRequest;
  }

  public void setReplyRequest(Boolean replyRequest) {
    this.replyRequest = replyRequest;
  }

  public SendMmsRequest mmSContent(List<MMSContent> mmSContent) {
    this.mmSContent = mmSContent;
    return this;
  }

  public SendMmsRequest addMmSContentItem(MMSContent mmSContentItem) {
    this.mmSContent.add(mmSContentItem);
    return this;
  }

   /**
   * An Array of content that will be sent in an MMS message. If this array is present it will cause the “body” element to be ignored, and the message will be sent as an MMS.
   * @return mmSContent
  **/
  @ApiModelProperty(required = true, value = "An Array of content that will be sent in an MMS message. If this array is present it will cause the “body” element to be ignored, and the message will be sent as an MMS.")
  public List<MMSContent> getMmSContent() {
    return mmSContent;
  }

  public void setMmSContent(List<MMSContent> mmSContent) {
    this.mmSContent = mmSContent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendMmsRequest sendMmsRequest = (SendMmsRequest) o;
    return Objects.equals(this.from, sendMmsRequest.from) &&
        Objects.equals(this.to, sendMmsRequest.to) &&
        Objects.equals(this.subject, sendMmsRequest.subject) &&
        Objects.equals(this.replyRequest, sendMmsRequest.replyRequest) &&
        Objects.equals(this.mmSContent, sendMmsRequest.mmSContent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, to, subject, replyRequest, mmSContent);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendMmsRequest {\n");
    
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    replyRequest: ").append(toIndentedString(replyRequest)).append("\n");
    sb.append("    mmSContent: ").append(toIndentedString(mmSContent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

