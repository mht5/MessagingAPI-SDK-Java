/*
 * Telstra Messaging API
 *  The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages. 
 *
 * OpenAPI spec version: 2.2.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.telstra.messaging;

import com.telstra.ApiCallback;
import com.telstra.ApiClient;
import com.telstra.ApiException;
import com.telstra.ApiResponse;
import com.telstra.Configuration;
import com.telstra.Pair;
import com.telstra.ProgressRequestBody;
import com.telstra.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.telstra.messaging.AuthgeneratetokenpostResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthApi {
    private ApiClient apiClient;

    public AuthApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for oauthTokenPost
     * @param oAuthClientId  (required)
     * @param oAuthClientSecret  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call oauthTokenPostCall(String oAuthClientId, String oAuthClientSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (oAuthClientId != null)
        localVarFormParams.put("oAuthClientId", oAuthClientId);
        if (oAuthClientSecret != null)
        localVarFormParams.put("oAuthClientSecret", oAuthClientSecret);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call oauthTokenPostValidateBeforeCall(String oAuthClientId, String oAuthClientSecret, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'oAuthClientId' is set
        if (oAuthClientId == null) {
            throw new ApiException("Missing the required parameter 'oAuthClientId' when calling oauthTokenPost(Async)");
        }
        
        // verify the required parameter 'oAuthClientSecret' is set
        if (oAuthClientSecret == null) {
            throw new ApiException("Missing the required parameter 'oAuthClientSecret' when calling oauthTokenPost(Async)");
        }
        

        com.squareup.okhttp.Call call = oauthTokenPostCall(oAuthClientId, oAuthClientSecret, progressListener, progressRequestListener);
        return call;

    }

    /**
     * AuthGeneratetokenPost
     * generate auth token
     * @param oAuthClientId  (required)
     * @param oAuthClientSecret  (required)
     * @return AuthgeneratetokenpostResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AuthgeneratetokenpostResponse oauthTokenPost(String oAuthClientId, String oAuthClientSecret) throws ApiException {
        ApiResponse<AuthgeneratetokenpostResponse> resp = oauthTokenPostWithHttpInfo(oAuthClientId, oAuthClientSecret);
        return resp.getData();
    }

    /**
     * AuthGeneratetokenPost
     * generate auth token
     * @param oAuthClientId  (required)
     * @param oAuthClientSecret  (required)
     * @return ApiResponse&lt;AuthgeneratetokenpostResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AuthgeneratetokenpostResponse> oauthTokenPostWithHttpInfo(String oAuthClientId, String oAuthClientSecret) throws ApiException {
        com.squareup.okhttp.Call call = oauthTokenPostValidateBeforeCall(oAuthClientId, oAuthClientSecret, null, null);
        Type localVarReturnType = new TypeToken<AuthgeneratetokenpostResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * AuthGeneratetokenPost (asynchronously)
     * generate auth token
     * @param oAuthClientId  (required)
     * @param oAuthClientSecret  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call oauthTokenPostAsync(String oAuthClientId, String oAuthClientSecret, final ApiCallback<AuthgeneratetokenpostResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = oauthTokenPostValidateBeforeCall(oAuthClientId, oAuthClientSecret, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AuthgeneratetokenpostResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
