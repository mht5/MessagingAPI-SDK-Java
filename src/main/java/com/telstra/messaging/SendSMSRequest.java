/*
 * Telstra Messaging API
 *  The Telstra SMS Messaging API allows your applications to send and receive SMS text messages from Australia's leading network operator.  It also allows your application to track the delivery status of both sent and received SMS messages. 
 *
 * OpenAPI spec version: 2.2.5
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.telstra.messaging;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SendSMSRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-03-08T00:36:43.245Z")
public class SendSMSRequest {
  @SerializedName("to")
  private String to = null;

  @SerializedName("body")
  private String body = null;

  @SerializedName("from")
  private String from = null;

  @SerializedName("validity")
  private Integer validity = null;

  @SerializedName("scheduledDelivery")
  private Integer scheduledDelivery = null;

  @SerializedName("notifyURL")
  private String notifyURL = null;

  @SerializedName("replyRequest")
  private Boolean replyRequest = null;

  public SendSMSRequest to(String to) {
    this.to = to;
    return this;
  }

   /**
   * Phone number (in E.164 format) to send the SMS to. This number can be in international format if preceeded by a ‘+’, or in national format.
   * @return to
  **/
  @ApiModelProperty(required = true, value = "Phone number (in E.164 format) to send the SMS to. This number can be in international format if preceeded by a ‘+’, or in national format.")
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }

  public SendSMSRequest body(String body) {
    this.body = body;
    return this;
  }

   /**
   * The text body of the message. Messages longer than 160 characters will be counted as multiple messages.
   * @return body
  **/
  @ApiModelProperty(required = true, value = "The text body of the message. Messages longer than 160 characters will be counted as multiple messages.")
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public SendSMSRequest from(String from) {
    this.from = from;
    return this;
  }

   /**
   * Phone number (in E.164 format) the SMS was sent from. If not present, the serverice will use the mobile number associated with the application, or it be an Alphanumeric address of up to 11 characters.
   * @return from
  **/
  @ApiModelProperty(value = "Phone number (in E.164 format) the SMS was sent from. If not present, the serverice will use the mobile number associated with the application, or it be an Alphanumeric address of up to 11 characters.")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public SendSMSRequest validity(Integer validity) {
    this.validity = validity;
    return this;
  }

   /**
   * How long the platform should attempt to deliver the message for. This period is specified in minutes from the message
   * @return validity
  **/
  @ApiModelProperty(example = "20", value = "How long the platform should attempt to deliver the message for. This period is specified in minutes from the message")
  public Integer getValidity() {
    return validity;
  }

  public void setValidity(Integer validity) {
    this.validity = validity;
  }

  public SendSMSRequest scheduledDelivery(Integer scheduledDelivery) {
    this.scheduledDelivery = scheduledDelivery;
    return this;
  }

   /**
   * How long the platform should wait before attempting to send the message - specified in minutes.
   * @return scheduledDelivery
  **/
  @ApiModelProperty(example = "20", value = "How long the platform should wait before attempting to send the message - specified in minutes.")
  public Integer getScheduledDelivery() {
    return scheduledDelivery;
  }

  public void setScheduledDelivery(Integer scheduledDelivery) {
    this.scheduledDelivery = scheduledDelivery;
  }

  public SendSMSRequest notifyURL(String notifyURL) {
    this.notifyURL = notifyURL;
    return this;
  }

   /**
   * Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc.
   * @return notifyURL
  **/
  @ApiModelProperty(value = "Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc.")
  public String getNotifyURL() {
    return notifyURL;
  }

  public void setNotifyURL(String notifyURL) {
    this.notifyURL = notifyURL;
  }

  public SendSMSRequest replyRequest(Boolean replyRequest) {
    this.replyRequest = replyRequest;
    return this;
  }

   /**
   * If set to true, the reply message functionality will be implemented and the to address will be ignored if present. If false or not present, then normal message handling is implemented.
   * @return replyRequest
  **/
  @ApiModelProperty(value = "If set to true, the reply message functionality will be implemented and the to address will be ignored if present. If false or not present, then normal message handling is implemented.")
  public Boolean getReplyRequest() {
    return replyRequest;
  }

  public void setReplyRequest(Boolean replyRequest) {
    this.replyRequest = replyRequest;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendSMSRequest sendSMSRequest = (SendSMSRequest) o;
    return Objects.equals(this.to, sendSMSRequest.to) &&
        Objects.equals(this.body, sendSMSRequest.body) &&
        Objects.equals(this.from, sendSMSRequest.from) &&
        Objects.equals(this.validity, sendSMSRequest.validity) &&
        Objects.equals(this.scheduledDelivery, sendSMSRequest.scheduledDelivery) &&
        Objects.equals(this.notifyURL, sendSMSRequest.notifyURL) &&
        Objects.equals(this.replyRequest, sendSMSRequest.replyRequest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(to, body, from, validity, scheduledDelivery, notifyURL, replyRequest);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendSMSRequest {\n");
    
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    validity: ").append(toIndentedString(validity)).append("\n");
    sb.append("    scheduledDelivery: ").append(toIndentedString(scheduledDelivery)).append("\n");
    sb.append("    notifyURL: ").append(toIndentedString(notifyURL)).append("\n");
    sb.append("    replyRequest: ").append(toIndentedString(replyRequest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

